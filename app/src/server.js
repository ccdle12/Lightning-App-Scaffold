const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const lnClient = require('./lightning-client/client').client;
const path = require('path');
const utils = require('./utils/utils');
const routes = require('./routes');

module.exports = function() {
  // Setup the app, views folder, view engine, 
  //public files and body parser.
  app.set("views", path.join(__dirname, "views"));
  app.set("view engine", "ejs");
  app.use(express.static(path.join(__dirname, "public")));
  app.use(bodyParser.urlencoded({ extended: true }));
  app.use(bodyParser.json());

  // Serve home page.
  app.get("/", (req, res) => res.render("index") );

  /**
   * POST /getinvoice will generate an invoice
   * on the LND Node.
   */
   app.post('/getinvoice', async (_, res) => {

    // Request an invoice to be generated by the lnd node. 
    let invoiceAmt = {value: 100}

    lnClient.AddInvoice(invoiceAmt, (err, invoiceRes) => {  
      // Check for returned err.
      if (err) {
        res.render('invoice', {invoice: "There was an error: " + err});
        return;
      };

      // Parse the invoice as JSON and retrieve the payment_request.
      let invoiceObj = utils.objToJSON(invoiceRes);
      let payReq = invoiceObj["payment_request"];

      // Render invoice.html passing the payment request.
      res.render('invoice', {invoice: payReq});
      return;
      });
    });

 /**
  * POST /payinvoice will call the node to 
  * pay a provided invoice.
  */
  app.post('/payinvoice', async (req, res) => {
    // Request an invoice to be generated by the lnd node.
    let request = {
      payment_request: req.body.invoice,
    };

    // let call = lnClient.client.sendPayment({})
    let call = lnClient.sendPayment({})
    call.on('data', function(response) {
      // A response was received from the server.
      console.log(response);
    });
      
    call.on('status', function(status) {
      // The current status of the stream.
      console.log(status)
    });
    call.on('end', function() {
      // The server has closed the stream.
    });
    call.write(request)
  });

    return app;
};
