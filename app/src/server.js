const express = require('express')
const app = express()
const bodyParser = require('body-parser')
const lnClient = require('./lightning-client/client')
const path = require('path')
const utils = require('./utils.js')

// Setup the app, views folder, view engine, 
//public files and body parser.
app.set('views', path.join(__dirname, '/views'))
app.set('view engine', 'ejs')
app.use(express.static(path.join(__dirname, 'public')))
app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())

// Serve home page.
app.get('/', function (req, res) {
  res.render('index')
})

// POST to get invoice.
app.post('/getinvoice', async function (_, res) {
  
  // Request an invoice to be generated by the lnd node. 
  invoice = await lnClient.generateInvoice();

  // Check that there was an error returned from retrieving the invoice.
  if (invoice.err) {
    res.render('invoice', {invoice: "There was an error: " + invoice.err});
    return;
  }

  // Parse the invoice as JSON and retrieve the payment_request.
  resultJSON = utils.objToJSON(invoice.result);
  payReq = resultJSON["payment_request"];

  // Render invoice.html passing the payment request.
  res.render('invoice', {invoice: payReq});
});

// POST to pay invoice.
app.post('/payinvoice', async function (req, res) {

  console.log(req.body.invoice);
  // Request an invoice to be generated by the lnd node.
  var request = {
      payment_request: req.body.invoice,
  }

  // invoice = await lnClient.sendRequest(request);

  var call = lnClient.client.sendPayment({})
  call.on('data', function(response) {
    // A response was received from the server.
    console.log(response);
  });
  call.on('status', function(status) {
    // The current status of the stream.
    console.log(status)
  });
  call.on('end', function() {
    // The server has closed the stream.
  });
  call.write(request)

});

// Serve the app.
app.listen(3000, () => {
  console.log('Example app listening on port 3000!')
})
